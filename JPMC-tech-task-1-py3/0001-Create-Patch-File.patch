From 518e36ad992bced1e42905251bac176c755852a7 Mon Sep 17 00:00:00 2001
From: Abhay Jindal <jindal1808@gmail.com>
Date: Tue, 4 May 2021 16:16:00 +0530
Subject: [PATCH] Create Patch File

---
 JPMC-tech-task-1-py3/client3.py     | 18 ++++++++++++------
 JPMC-tech-task-1-py3/client_test.py | 18 +++++++++++++++---
 2 files changed, 27 insertions(+), 9 deletions(-)

diff --git a/JPMC-tech-task-1-py3/client3.py b/JPMC-tech-task-1-py3/client3.py
index f1771c3..b8cf35f 100644
--- a/JPMC-tech-task-1-py3/client3.py
+++ b/JPMC-tech-task-1-py3/client3.py
@@ -19,7 +19,6 @@
 #  DEALINGS IN THE SOFTWARE.
 
 import urllib.request
-import time
 import json
 import random
 
@@ -35,14 +34,17 @@ def getDataPoint(quote):
 	stock = quote['stock']
 	bid_price = float(quote['top_bid']['price'])
 	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
-	return stock, bid_price, ask_price, price
+    price = (bid_price+ask_price)/2
+	return stock, bid_price, ask_price, round(price, 2)
 
 def getRatio(price_a, price_b):
 	""" Get ratio of price_a and price_b """
 	""" ------------- Update this function ------------- """
 	""" Also create some unit tests for this function in client_test.py """
-	return 1
+	try:
+		return round(price_a/price_b, 2)
+	except:
+		return
 
 # Main
 if __name__ == "__main__":
@@ -50,10 +52,14 @@ if __name__ == "__main__":
 	# Query the price once every N seconds.
 	for _ in iter(range(N)):
 		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
-
+		
 		""" ----------- Update to get the ratio --------------- """
+		
+		priceData = {}
 		for quote in quotes:
 			stock, bid_price, ask_price, price = getDataPoint(quote)
+			priceData[stock] = price
 			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-		print ("Ratio %s" % getRatio(price, price))
+		print ("Ratio %s" % getRatio(priceData.get('ABC', 0), priceData.get('DEF', 0)))
+	
diff --git a/JPMC-tech-task-1-py3/client_test.py b/JPMC-tech-task-1-py3/client_test.py
index af2bf26..3a56492 100644
--- a/JPMC-tech-task-1-py3/client_test.py
+++ b/JPMC-tech-task-1-py3/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -8,6 +8,11 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+        top_bid = float(quote['top_bid']['price'])
+        top_ask = float(quote['top_ask']['price'])
+        price = round((top_bid+top_ask)/2, 2)
+        self.assertEqual(getDataPoint(quote), (quote['stock'], top_bid, top_ask, price))
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,11 +20,18 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+        top_bid = float(quote['top_bid']['price'])
+        top_ask = float(quote['top_ask']['price'])
+        price = round((top_bid+top_ask)/2, 2)
+        self.assertEqual(getDataPoint(quote), (quote['stock'], top_bid, top_ask, price))
 
 
-  """ ------------ Add more unit tests ------------ """
-
 
+  """ ------------ Add more unit tests ------------ """
+  def test_getRatio_checkPricesEqualZero(self):
+    self.assertEqual(getRatio(1, 0), None)
+    self.assertEqual(getRatio(0, 0), None)
 
 if __name__ == '__main__':
     unittest.main()
-- 
2.29.0.windows.1

