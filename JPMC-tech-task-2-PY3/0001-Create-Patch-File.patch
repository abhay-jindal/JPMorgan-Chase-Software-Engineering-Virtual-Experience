From 591e109294bba4407f9b8a55c8589d76fb73e351 Mon Sep 17 00:00:00 2001
From: Abhay Jindal <jindal1808@gmail.com>
Date: Fri, 7 May 2021 20:47:29 +0530
Subject: [PATCH] Create Patch File

---
 JPMC-tech-task-2-PY3/src/App.tsx   | 38 +++++++++++++++++++++---------
 JPMC-tech-task-2-PY3/src/Graph.tsx | 18 +++++++++++---
 2 files changed, 42 insertions(+), 14 deletions(-)

diff --git a/JPMC-tech-task-2-PY3/src/App.tsx b/JPMC-tech-task-2-PY3/src/App.tsx
index 0728518..f9b9ae3 100644
--- a/JPMC-tech-task-2-PY3/src/App.tsx
+++ b/JPMC-tech-task-2-PY3/src/App.tsx
@@ -7,7 +7,8 @@ import './App.css';
  * State declaration for <App />
  */
 interface IState {
-  data: ServerRespond[],
+    data: ServerRespond[],
+    showGraph: boolean,
 }
 
 /**
@@ -21,27 +22,42 @@ class App extends Component<{}, IState> {
     this.state = {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
-      data: [],
+        data: [],
+        showGraph: false,
     };
   }
 
   /**
    * Render Graph react component with state.data parse as property data
    */
-  renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    renderGraph() {
+        if (this.state.showGraph) {
+            return (<Graph data={this.state.data}/>)
+        }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
-  getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
-  }
+    getDataFromServer() {
+        let x = 0;
+        const interval = setInterval(() => {
+            DataStreamer.getData((serverResponds: ServerRespond[]) => {
+                // Update the state by creating a new array of data that consists of
+                // Previous data in the state and the new data from server
+
+                this.setState({
+                    data: serverResponds,
+                    showGraph: true,
+                });
+            });
+
+            x++;
+            if (x > 1000) {
+                clearInterval(interval);
+            }
+        }, 100);
+    }
 
   /**
    * Render the App react component
diff --git a/JPMC-tech-task-2-PY3/src/Graph.tsx b/JPMC-tech-task-2-PY3/src/Graph.tsx
index ec1430e..f5315ed 100644
--- a/JPMC-tech-task-2-PY3/src/Graph.tsx
+++ b/JPMC-tech-task-2-PY3/src/Graph.tsx
@@ -13,8 +13,9 @@ interface IProps {
 /**
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
+ * Extend this inteface using HTMLElement class
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +33,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -47,7 +48,18 @@ class Graph extends Component<IProps, {}> {
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
-      // Add more Perspective configurations here.
+        // Add more Perspective configurations here.
+        elem.setAttribute('view', 'y_line');   // Visualize the data as continuous line graph.
+        elem.setAttribute('column-pivots', '["stock"]');  // Stock is used to distinguish between two stocks i.e. ABC & DEF.
+        elem.setAttribute('row-pivots', '["timestamp"]');  // Timestamp will be plotted on x-axis to map the related stocks.
+        elem.setAttribute('columns', '["top_ask_price"]');  // Allow us to only focus on a particular part of a stock’s data along the y-axis.
+        elem.setAttribute('aggregates',
+            `{
+                "stock": "distinct_count",
+                "top_ask_price": "avg",
+                "top_bid_price": "avg",
+                "timestamp": "distinct_count",
+            }`);  // To handle duplicated data and treat each point to be unique.
       elem.load(this.table);
     }
   }
-- 
2.29.0.windows.1

